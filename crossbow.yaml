config:
  progress: true

frameworks:
  glimmer:
    title: Glimmer
  inferno:
    title: Inferno
  ember:
    title: Ember
  ng:
    title: Angular
  cra:
    title: React
  preact:
    title: Preact
  vue:
    title: Vue

env:
  PORT: 9000
  LH_BIN: perf-battle

  GLIMMER_DIR: glimmer-app
  EMBER_DIR: ember-app
  CRA_DIR: cra-app
  PREACT_DIR: preact-app
  NG_DIR: ng-app
  VUE_DIR: vue-app
  INFERNO_DIR: inferno-app

tasks:

  (install):
    global: >
      @sh yarn global add
      create-react-app
      preact-cli
      create-inferno-app
      ember-cli/ember-cli
      vue-cli
      @angular/cli
      perf-battle

  ## Glimmer.js
  (glimmer):
    clean:
      - '@sh rm -rf $GLIMMER_DIR'
    init: >
      @npm ember new $GLIMMER_DIR -b @glimmer/blueprint
    build: >
      @sh cd $GLIMMER_DIR
      && ember build --environment="production"
    serve: >
      @sh pushstate-server $GLIMMER_DIR/dist $PORT
    perf-battle: >
      @npm perf-battle
      http://localhost:$PORT
      --reporter size
      --output json
      --outFile results/glimmer.json

    lighthouse:
      - glimmer:perf-battle
      - '@cb exit'

  glimmer-run:
    description: Create production Glimmer app & test in lighthouse
    tasks:
      - glimmer:build
      - [glimmer:serve, glimmer:lighthouse]

  ## Ember.js
  (ember):
    clean:
      - '@sh rm -rf $EMBER_DIR'
    init: >
      @npm ember new $EMBER_DIR
    build: >
      @sh cd $EMBER_DIR
      && ember build --environment="production"
    serve: >
      @sh pushstate-server $EMBER_DIR/dist $PORT
    perf-battle: >
      @npm perf-battle
      http://localhost:$PORT
      --reporter size
      --output json
      --outFile results/ember.json

    lighthouse:
      - ember:perf-battle
      - '@cb exit'

  ember-run:
    description: Create production Ember app & test in lighthouse
    tasks:
      - ember:build
      - [ember:serve, ember:lighthouse]

  ### Create React App
  (cra):
    clean:
      - '@sh rm -rf $CRA_DIR'
    init: >
      @npm create-react-app $CRA_DIR
    build: >
      @sh cd $CRA_DIR
      && yarn run build
    serve: >
      @sh pushstate-server $CRA_DIR/build $PORT
    perf-battle: >
      @npm perf-battle
      http://localhost:$PORT
      --reporter size
      --output json
      --outFile results/cra.json

    lighthouse:
      - cra:perf-battle
      - '@cb exit'

  cra-run:
    description: Create production React app & test in lighthouse
    tasks:
      - cra:build
      - [cra:serve, cra:lighthouse]

  ### Create Inferno App
  (inferno):
    clean:
      - '@sh rm -rf $INFERNO_DIR'
    init: >
      @npm create-inferno-app $INFERNO_DIR
    build: >
      @sh cd $INFERNO_DIR
      && yarn run build
    serve: >
      @sh pushstate-server $INFERNO_DIR/build $PORT
    perf-battle: >
      @npm perf-battle
      http://localhost:$PORT
      --reporter size
      --output json
      --outFile results/inferno.json

    lighthouse:
      - inferno:perf-battle
      - '@cb exit'

  inferno-run:
    description: Create production Inferno app & test in lighthouse
    tasks:
      - inferno:build
      - [inferno:serve, inferno:lighthouse]

  ### preact
  (preact):
    clean:
      - '@sh rm -rf $PREACT_DIR'
    init: >
      @npm preact create --type empty $PREACT_DIR
    build: >
      @sh cd $PREACT_DIR
      && yarn run build
    serve: >
      @sh pushstate-server $PREACT_DIR/build $PORT
    perf-battle: >
      @npm perf-battle
      http://localhost:$PORT
      --reporter size
      --output json
      --outFile results/preact.json

    lighthouse:
      - preact:perf-battle
      - '@cb exit'

  preact-run:
    description: Create production Preact app & test in lighthouse
    tasks:
      - preact:build
      - [preact:serve, preact:lighthouse]


  ### ANGULAR 2
  (ng):
    clean:
      - '@sh rm -rf $NG_DIR'
    init: >
      @npm ng new $NG_DIR
    build: >
      @npm cd $NG_DIR
      && ng build --aot --target=production
    serve: >
      @sh pushstate-server $NG_DIR/dist $PORT
    perf-battle: >
      @npm perf-battle
      http://localhost:$PORT
      --reporter size
      --output json
      --outFile results/ng.json

    lighthouse:
      - ng:perf-battle
      - '@cb exit'

  ng-run:
    description: Create a production NG2 app & test in lighthouse
    tasks:
      - ng:build
      - [ng:serve, ng:lighthouse]

  ### Vue js
  (vue):
    clean:
      - '@sh rm -rf $VUE_DIR'
    init: >
      @npm vue init webpack $VUE_DIR
    build: >
      @npm cd $VUE_DIR
      && yarn
      && yarn run build
    serve: >
      @sh pushstate-server $VUE_DIR/dist $PORT
    perf-battle: >
      @npm perf-battle
      http://localhost:$PORT
      --reporter size
      --output json
      --outFile results/vue.json

    lighthouse:
      - vue:perf-battle
      - '@cb exit'

  vue-run:
    description: Create a production Vue app & test in lighthouse
    tasks:
      - vue:build
      - [vue:serve, vue:lighthouse]